@using Newtonsoft.Json
@using TropicalBudget.Utilities
@model Tuple<Guid, List<Transaction>>
@{
    ViewData["Title"] = "Budget";
    List<Transaction> transactions = Model.Item2;
    Guid budgetID = Model.Item1;
    List<IGrouping<DateOnly, Transaction>> groupedTransactions = transactions.GroupBy(transaction => DateOnly.FromDateTime(transaction.TransactionDate)).ToList();
    List<IGrouping<Guid, Transaction>> categoryGroupedExpenses = transactions.Where(transaction => transaction.TransactionType == TransactionUtility.TRANSACTION_TYPE_EXPENSE).GroupBy(transaction => transaction.CategoryID).ToList();
    List<Transaction> expensesByCategory = new();
    foreach (IGrouping<Guid, Transaction> categoryGroupedTransaction in categoryGroupedExpenses){
        expensesByCategory.Add(new()
        {
            CategoryID = categoryGroupedTransaction.Key,
            Amount = categoryGroupedTransaction.Sum(tran => tran.Amount),
            CategoryName = categoryGroupedTransaction.First().CategoryName,
            CategoryColor = categoryGroupedTransaction.First().CategoryColor
        });
    }
    string currentMonthString = TempData.ContainsKey("currentMonthString") ? (string)TempData["currentMonthString"] : string.Empty;
    DateTime startDate = (DateTime)TempData["startDate"];
    string budgetName = TempData["BudgetName"].ToString();
    int nextMonth = startDate.AddMonths(1).Month;
    int nextYear = startDate.AddMonths(1).Year;
    int previousMonth = startDate.AddMonths(-1).Month;
    int previousYear = startDate.AddMonths(-1).Year;

    Dictionary<string, string> newTransactionRouteData = new()
    {
        {"budgetID", budgetID.ToString()}
    };
    Dictionary<string, string> fullTransactionRouteData = new()
    {
        {"budgetID", budgetID.ToString()},
        {"year", startDate.Year.ToString()},
        {"month", startDate.Month.ToString()},
    };

    if (groupedTransactions != null)
        groupedTransactions = groupedTransactions.OrderByDescending(group => group.Key).ToList();

}

<div class="text-center">
    <input class="display-4 budget-name" id="budget_name" onchange="onBudgetNameChange()" value="@budgetName" />
    <div class="d-flex justify-content-between align-items-center gap-2 p-1 my-2 border border-primary rounded-pill">
        <i class="bi bi-chevron-left fs-4 bg-primary text-white py-3 px-4 px-lg-5 rounded-pill" onclick="previousMonth()" style="cursor:pointer"></i>
        <div class="d-flex flex-column gap-2">
            <p class="fs-5 fw-bold m-0">@currentMonthString</p>
            <p class="fs-6 fw-normal m-0 text-uppercase">@(transactions.Count) transactions</p>
        </div>
        <i class="bi bi-chevron-right fs-4 bg-primary text-white py-3 px-4 px-lg-5 rounded-pill" onclick="nextMonth()" style="cursor:pointer"></i>
    </div>
    <partial name="~/Views/Home/_SpendingListBanner.cshtml" model="transactions" />

</div>

@* Button row *@
<div class="d-flex flex-wrap justify-content-end align-items-center gap-2 my-3">
    <a class="text-decoration-none py-1 px-4 d-block rounded-pill d-flex gap-2 btn btn-primary border" asp-controller="Transaction" asp-action="New" asp-all-route-data="newTransactionRouteData">
		<span>Add New Transaction</span>
        <i class="bi bi-plus-circle"></i>
    </a>
	<a class="text-decoration-none py-1 px-4 d-block rounded-pill d-flex gap-2 btn btn-outline-primary border border-primary" asp-controller="Transaction" asp-action="Index" asp-all-route-data="newTransactionRouteData">
        <span>Today</span>
        <i class="bi bi-calendar-check"></i>
    </a>
    <a id="spendingListButton" class="text-decoration-none py-1 px-4 rounded-pill d-flex gap-2 btn-outline-success border border-success" asp-controller="Insights" asp-action="Index" asp-all-route-data="fullTransactionRouteData" style="cursor:pointer">
        <span>Insights</span>
        <i class="bi bi-graph-up-arrow"></i>
    </a>
	<button class="text-decoration-none py-1 px-4 rounded-pill d-flex gap-2 btn btn-outline-danger border border-danger" onclick="onDeleteBudgetClicked()">
        <span>Delete Budget</span>
        <i class="bi bi-trash"></i>
    </button>

</div>

<div id="spendingListContainer"  >
    <div class="d-flex flex-column gap-2">
        @if (groupedTransactions != null && groupedTransactions.Count > 0)
        {
            foreach (IGrouping<DateOnly, Transaction> groupedTransaction in groupedTransactions)
            {
                <div>
                    @{
                        decimal dailyTotal = TransactionUtility.GetIncome(groupedTransaction.ToList()) - TransactionUtility.GetExpenses(groupedTransaction.ToList());
                        string dailyTotalPrefix = string.Empty;
                        if (dailyTotal > 0)
                            dailyTotalPrefix = "+";

                    }
                    <div class="d-flex justify-content-between align-items-center my-2">
                        <h2>@groupedTransaction.Key.ToString("yyyy-MM-dd")</h2>
                        <span>@($"{dailyTotalPrefix}{dailyTotal:c}")</span>
                    </div>
                    <div class="d-flex flex-column gap-2">
                        @if (groupedTransaction != null && groupedTransaction.ToList().Count > 0)
                        {
                            foreach (Transaction transaction in groupedTransaction.ToList())
                            {
                                <partial name="~/Views/Transaction/_TransactionCard.cshtml" model="transaction" />
                            }
                        }
                    </div>
                </div>
            }
        }
        else{
            <div class="d-flex flex-column align-items-center justify-content-center my-5">
                <h2 class="text-center">No Transactions</h2>
                <i class="bi bi-file-earmark-text" style="font-size:4rem;"></i>
            </div>
        }
    </div>
</div>

<script>

    const onBudgetNameChange = ()=> {
        const budget_name = $("#budget_name");
        const updated_budget_name = budget_name.val();
        $.ajax(
        {
            type: 'POST',
            //this url assumes your controller action is in HomeController.cs
            url: "@Url.Action("UpdateBudgetName", "Home")" ,
            data: { budgetID: "@budgetID", name: updated_budget_name },
            success: function (data) {
                console.log("success");
            },
            error: function (ex) {
                console.log(ex)
            }
        });
    }
    
    const onDeleteBudgetClicked = ()=> {
        const budget_name = $("#budget_name").val();
        if(confirm(`Are you sure you want to delete budget ${budget_name}?`)){
            $.ajax(
            {
                type: 'DELETE',
                //this url assumes your controller action is in HomeController.cs
                url: "@Url.Action("DeleteBudget", "Home")" ,
                data: { budgetID: "@budgetID"},
                success: function (data) {
                    console.log("success");
                    location.href = "@Url.Action("Index", "Home")";
                },
                error: function (ex) {
                    console.log(ex)
                }
            });

        }
    }


    const deleteTransaction = (transaction_id) => {
        if(confirm("Are you sure you want to delete this transaction?") == true){
            location.href = "@Url.Action("DeleteTransaction", "Transaction")" +`?budgetID=${"@(budgetID.ToString())"}` + "&transactionID=" + transaction_id;
        }
    }

    const editTransaction = (transaction_id) => {
        location.href = "@Url.Action("EditTransaction", "Transaction")" +"?transactionID=" + transaction_id;
    }
    const nextMonth = () =>{
        location.href = "@Url.Action("Index", "Transaction")" + `?budgetID=${"@(budgetID.ToString())"}&year=${@(nextYear)}&month=${@(nextMonth)}`;
    }
    const previousMonth = () =>{
        location.href = "@Url.Action("Index", "Transaction")" + `?budgetID=${"@(budgetID.ToString())"}&year=${@(previousYear)}&month=${@(previousMonth)}`;
    }
</script>