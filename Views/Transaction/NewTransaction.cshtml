@using TropicalBudget.Utilities
@model Transaction
@{
    ViewData["Title"] = "New Transaction";
    List<TransactionCategory> transactionCategories = (List<TransactionCategory>)TempData["TransactionCategories"];
    List<TransactionSource> transactionSources = (List<TransactionSource>)TempData["TransactionSources"];
    List<TransactionType> transactionTypes = (List<TransactionType>)TempData["TransactionTypes"];
}

<div class="text-center">
    <h1 class="display-4">New Transaction</h1>
    <div>
        @using (Html.BeginForm("AddNewTransaction", "Transaction"))
        {
            @Html.AntiForgeryToken();
            <div class="d-flex flex-column gap-2">
                @Html.HiddenFor(x => x.BudgetID)
                @Html.LabelFor(x =>x.Amount)
                @Html.TextBoxFor(x => x.Amount, new { @placeholder = "Amount", @type = "number", @class = "form-control" })
                
                @Html.LabelFor(x =>x.CategoryID, "Category")
                @Html.DropDownListFor(x => x.CategoryID, new SelectList(transactionCategories, "ID", "Name"), new { @class = "form-select" })
                @Html.LabelFor(x =>x.SourceID, "From", new{ @id ="source-label"})
                @Html.DropDownListFor(x => x.SourceID, new SelectList(transactionSources, "ID", "Name"), new { @class = "form-select" })
                @Html.LabelFor(x => x.TransactionTypeID, "Transaction Type")
                @Html.DropDownListFor(x => x.TransactionTypeID, new SelectList(transactionTypes, "ID", "Name"), new { @class = "form-select", @onchange = "onTransactionTypeChanged(this.options[this.selectedIndex].text)" })
                @Html.LabelFor(x => x.TransactionDate, "Date")
                @Html.TextBoxFor(x => x.TransactionDate, "{0:yyyy-MM-dd}", new { @type="date", @class = "form-control" })
                @Html.LabelFor(x => x.Note)
                @Html.TextBoxFor(x => x.Note, new { @placeholder = "Note", @type = "text", @class = "form-control" })

                <input type="submit" name="SaveButton" class="btn btn-primary" value="Save" />
                <input type="button" name="ExitButton" onclick="navigateToHome()" class="btn btn-outline-primary" value="Exit" />

            </div>
        }
    </div>
</div>

<script>
    const navigateToHome = () =>{
        location.href = "@Url.Action("Index", "Home")" +"?budgetID=@(Model.BudgetID.ToString())";
    }
    const onTransactionTypeChanged = (transactionType) =>  {
        const source_label = document.getElementById('source-label');
        if(transactionType == "@TransactionUtility.TRANSACTION_TYPE_EXPENSE"){
            source_label.innerText = "From";
        }else if(transactionType == "@TransactionUtility.TRANSACTION_TYPE_INCOME"){
            source_label.innerText = "To";

        }
    }
</script>