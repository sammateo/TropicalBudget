@using Newtonsoft.Json
@using TropicalBudget.Utilities
@model Tuple<Guid, List<Transaction>>
@{
    ViewData["Title"] = "Insights";
    List<Transaction> transactions = Model.Item2;
    Guid budgetID = Model.Item1;
    
    string currentMonthString = TempData.ContainsKey("currentMonthString") ? (string)TempData["currentMonthString"] : string.Empty;
    DateTime startDate = (DateTime)TempData["startDate"];
    string budgetName = TempData["BudgetName"].ToString();
    int nextMonth = startDate.AddMonths(1).Month;
    int nextYear = startDate.AddMonths(1).Year;
    int previousMonth = startDate.AddMonths(-1).Month;
    int previousYear = startDate.AddMonths(-1).Year;

    Dictionary<string, string> newTransactionRouteData = new()
    {
        {"budgetID", budgetID.ToString()}
    };
    Dictionary<string, string> fullTransactionRouteData = new()
    {
        {"budgetID", budgetID.ToString()},
        {"year", startDate.Year.ToString()},
        {"month", startDate.Month.ToString()},
    };

    List<IGrouping<Guid, Transaction>> categoryGroupedExpenses = transactions.Where(transaction => transaction.TransactionType == TransactionUtility.TRANSACTION_TYPE_EXPENSE).GroupBy(transaction => transaction.CategoryID).ToList();
    List<IGrouping<Guid, Transaction>> categoryGroupedIncome = transactions.Where(transaction => transaction.TransactionType == TransactionUtility.TRANSACTION_TYPE_INCOME).GroupBy(transaction => transaction.CategoryID).ToList();
    
    List<Transaction> incomeTransactions = transactions.Where(x => x.TransactionType == TransactionUtility.TRANSACTION_TYPE_INCOME).ToList();
    List<Transaction> expenseTransactions = transactions.Where(x => x.TransactionType == TransactionUtility.TRANSACTION_TYPE_EXPENSE).ToList();
    decimal incomeAmount = incomeTransactions.Sum(x => x.Amount);
    decimal expenseAmount = expenseTransactions.Sum(x => x.Amount);
    decimal balance = incomeAmount - expenseAmount;
    
    
    List<Transaction> expensesByCategory = new();
    List<Transaction> incomeByCategory = new();
    foreach (IGrouping<Guid, Transaction> categoryGroupedTransaction in categoryGroupedExpenses)
    {
        expensesByCategory.Add(new()
        {
            CategoryID = categoryGroupedTransaction.Key,
            Amount = categoryGroupedTransaction.Sum(tran => tran.Amount),
            CategoryName = categoryGroupedTransaction.First().CategoryName,
            CategoryColor = categoryGroupedTransaction.First().CategoryColor
        });
    }
    foreach (IGrouping<Guid, Transaction> categoryGroupedTransaction in categoryGroupedIncome)
    {
        incomeByCategory.Add(new()
        {
            CategoryID = categoryGroupedTransaction.Key,
            Amount = categoryGroupedTransaction.Sum(tran => tran.Amount),
            CategoryName = categoryGroupedTransaction.First().CategoryName,
            CategoryColor = categoryGroupedTransaction.First().CategoryColor
        });
    }

}

<div class="text-center">
    <h2 class="fs-1">Insights: @budgetName</h2>
    <div class="d-flex justify-content-between align-items-center gap-2 p-1 my-2 border border-primary rounded-pill">
        <i class="bi bi-chevron-left fs-4 bg-primary text-white py-3 px-4 px-lg-5 rounded-pill" onclick="previousMonth()" style="cursor:pointer"></i>
        <div class="d-flex flex-column gap-2">
            <p class="fs-5 fw-bold m-0">@currentMonthString</p>
            <p class="fs-6 fw-normal m-0 text-uppercase">@(transactions.Count) transactions</p>
        </div>
        <i class="bi bi-chevron-right fs-4 bg-primary text-white py-3 px-4 px-lg-5 rounded-pill" onclick="nextMonth()" style="cursor:pointer"></i>
    </div>
    <partial name="~/Views/Home/_SpendingListBanner.cshtml" model="transactions" />
</div>

@* Button row *@
<div class="d-flex flex-wrap justify-content-end align-items-center gap-2 my-3">
    <a class="text-decoration-none py-1 px-4 d-block rounded-pill d-flex gap-2 btn btn-outline-primary border border-primary" asp-controller="Insights" asp-action="Index" asp-all-route-data="newTransactionRouteData">
        <span>Today</span>
        <i class="bi bi-calendar-check"></i>
    </a>
    <a id="spendingListButton" class="text-decoration-none py-1 px-4 rounded-pill d-flex gap-2 btn-outline-secondary border border-secondary" asp-controller="Transaction" asp-action="Index" asp-all-route-data="fullTransactionRouteData" style="cursor:pointer">
        <span>Budget</span>
        <i class="bi bi-card-list"></i>
    </a>
</div>

@if(transactions != null && transactions.Count > 0){
    <div style="max-width:90vw; width:500px;" class="d-flex flex-col mx-auto my-4 justify-content-center">
        <canvas class="" id="incomeExpenseBarChart"></canvas>
    </div>

    <div class="d-xl-flex gap-4 justify-content-center">
        <div id="spendingChartsContainer">
            <div class="d-flex flex-column flex-xl-row justify-content-center justify-content-xl-between align-items-center gap-2 px-2">
                <h3 class="text-center">Expenses</h3>
                    <div onclick="downloadExpenseCategoryChart()" class="text-decoration-none py-1 px-4 rounded-pill d-flex gap-2 btn-outline-secondary border border-secondary" style="cursor:pointer">
                        <span>Export</span>
                         <i class="bi bi-box-arrow-down"></i>
                    </div>
            </div>
            <div style="max-width:90vw; width:500px;" class="d-flex flex-col mx-auto my-4 justify-content-center">
                <canvas class="" id="donutTransactionCategoriesChart"></canvas>
            </div>
        </div>

        <div id="incomeChartsContainer">
            <div class="d-flex flex-column flex-xl-row justify-content-center justify-content-xl-between align-items-center gap-2 px-2">
                <h3 class="text-center">Income</h3>
                        <div onclick="downloadIncomeCategoryChart()" class="text-decoration-none py-1 px-4 rounded-pill d-flex gap-2 btn-outline-secondary border border-secondary" style="cursor:pointer">
                        <span>Export</span>
                         <i class="bi bi-box-arrow-down"></i>
                    </div>
            </div>
            <div style="max-width:90vw; width:500px;" class="d-flex flex-col mx-auto my-4 justify-content-center">
                <canvas class="" id="donutIncomeCategoriesChart"></canvas>
            </div>
        </div>
    </div>
}
else{
        <div class="d-flex flex-column align-items-center justify-content-center my-5">
            <h2 class="text-center">No Transactions</h2>
                <i class="bi bi-file-earmark-excel" style="font-size:4rem;"></i>
        </div>
}


<script>
    const downloadIncomeCategoryChart = () => {
        var a = document.createElement('a');
        a.href = incomeChart.toBase64Image();
        a.download = 'Income Category.png';
        // Trigger the download
        if(confirm('Do you want to download this chart?')){
            a.click();
        }
    }
    const downloadExpenseCategoryChart = () => {
        var a = document.createElement('a');
        a.href = expenseChart.toBase64Image();
        a.download = 'Expense Category.png';
        // Trigger the download
        if(confirm('Do you want to download this chart?')){
            a.click();
        }
    }
</script>


<script>
    const currencyFormatter = new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" });

    let expensesCategories =  @Html.Raw(JsonConvert.SerializeObject(expensesByCategory));
    let incomeCategories =  @Html.Raw(JsonConvert.SerializeObject(incomeByCategory));
    //expense categories
    var transactionCategoriesCtx = document.getElementById('donutTransactionCategoriesChart').getContext('2d');
    var expenseChart = new Chart(transactionCategoriesCtx, {
        type: 'doughnut',
        data: {
            labels: expensesCategories.map(cat => cat.CategoryName),
            datasets: [{
                label: 'Expenses',
                backgroundColor: expensesCategories.map(cat => cat.CategoryColor),
                //borderColor: 'rgb(255, 99, 132)',
                 data:expensesCategories.map(cat => cat.Amount)
            }]
        },
        options: {
            legend: {
                display:true,
                responsive:true,
                position:'bottom'
            },
            tooltips:{
                callbacks: {
                    label: function(tooltipItem, data){
                        let amount = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                        amount = currencyFormatter.format(amount)
                        let label = data.labels[tooltipItem.index];
                        return `${label}: ${amount}`;
                    }
                }
            }
        }
    });

    //income categories
    var incomeCategoriesCtx = document.getElementById('donutIncomeCategoriesChart').getContext('2d');
    var incomeChart = new Chart(incomeCategoriesCtx, {
        type: 'doughnut',
        data: {
            labels: incomeCategories.map(cat => cat.CategoryName),
            datasets: [{
                label: 'Income',
                backgroundColor: incomeCategories.map(cat => cat.CategoryColor),
                //borderColor: 'rgb(255, 99, 132)',
                 data:incomeCategories.map(cat => cat.Amount)
            }]
        },
        options: {
            legend: {
                display:true,
                responsive:true,
                position:'bottom'
            },
            tooltips:{
                callbacks: {
                    label: function(tooltipItem, data){
                        let amount = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                        amount = currencyFormatter.format(amount)
                        let label = data.labels[tooltipItem.index];
                        return `${label}: ${amount}`;
                    }
                }
            }
        }
    });

    //budget expense/income bar chart 
    var incomeExpenseBarChartCtx = document.getElementById('incomeExpenseBarChart').getContext('2d');
    var incomeExpenseBarChart = new Chart(incomeExpenseBarChartCtx, {
        type: 'bar',
        data: {
            labels: ['Income','Expense','Balance'],
            datasets: [{
                label: 'Income',
                backgroundColor: ['#4BB543','#FF0000','#0d6efd'],
                 data:[@incomeAmount, @expenseAmount, @balance]
            }]
        },
        options: {
            legend: {
                display:false,
                responsive:true,
                position:'bottom'
            },
            tooltips:{
                callbacks: {
                    label: function(tooltipItem, data){
                        let amount = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                        amount = currencyFormatter.format(amount)
                        let label = data.labels[tooltipItem.index];
                        return `${label}: ${amount}`;
                    }
                }
            },
            scales:{
            y: {
                beginAtZero: true,
                min:0,
            },
        }
        },
        
    });

</script>

<script>
    const nextMonth = () =>{
            location.href = "@Url.Action("Index", "Insights")" + `?budgetID=${"@(budgetID.ToString())"}&year=${@(nextYear)}&month=${@(nextMonth)}`;
        }
        const previousMonth = () =>{
            location.href = "@Url.Action("Index", "Insights")" + `?budgetID=${"@(budgetID.ToString())"}&year=${@(previousYear)}&month=${@(previousMonth)}`;
        }
</script>